{"version":3,"sources":["AlmondsHamirMahal.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","url","useState","dailyTotal","setDailyTotal","sixDigitID","setSixDigitID","className","src","almonds","alt","onSubmit","buttonSubmitEvent","preventDefault","fetch","then","r","json","j","foodObject","newTotal","foodNutrients","forEach","n","i","length","nutrient","id","amount","Math","round","push","add","max","min","type","onChange","e","target","value","map","foodNutrient","key","name","unitName","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,+C,8LCK5B,SAASC,IACtB,IAAIC,EAAM,wCADkB,EAEWC,mBAAS,IAFpB,mBAEpBC,EAFoB,KAEPC,EAFO,OAGOF,mBAAS,QAHhB,mBAGrBG,EAHqB,KAGVC,EAHU,KAsB5B,OAAS,yBAAKC,UAAU,OACtB,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAASF,UAAU,WAC3BG,IAAI,uBAFR,IAEgC,6BAC9B,0BAAMC,SAZW,SAAAC,GACnBA,EAAkBC,iBAClBZ,GAAG,UAAOI,EAAP,qBACHS,MAAMb,GAAKc,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAQF,MAAK,SAAAG,GAAC,OAb3B,SAAAC,GACV,IAAIC,EAAQ,YAAQjB,GACpBgB,EAAWE,cAAcC,SAAS,SAAAC,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IACnC,GAAIJ,EAASI,GAAGE,SAASC,KAAOJ,EAAEG,SAASC,GACzC,OAAOP,EAASI,GAAGI,OAAOC,KAAKC,MACC,KAA/BV,EAASI,GAAGI,OAASL,EAAEK,SAAc,IAC1CL,EAAEI,IAAMP,EAASW,KAAKR,MACxBnB,EAAcgB,GAK2BY,CAAId,QAU3C,2BAAOe,IAAI,SAASC,IAAI,SAASC,KAAK,SACtCC,SAfa,SAAAC,GAAC,OAAI/B,EAAc+B,EAAEC,OAAOC,QAerBA,MAAOlC,KACzBF,EAAWsB,OAAS,GAAK,mEAXRtB,EAAWqC,KAAI,SAAAC,GAAY,OAChD,wBAAIC,IAAKD,EAAaf,SAASC,IAChCc,EAAaf,SAASiB,KADrB,KAC6BF,EAAab,OAC3Ca,EAAaf,SAASkB,aAQQ,KAE3B,6BARF,IAQS,uBAAGrC,UAAU,WAAWsC,KAC/B,iDACAC,IAAI,sBAAsBR,OAAO,UAF1B,uDATF,KCfSS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.868f77c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AlmondsHamirMahal.556bbdad.png\";","import React, { useState, useEffect } from 'react';\r\nimport{BrowserRouter,Link,Route}from'react-router-dom';\r\nimport almonds from './AlmondsHamirMahal.png';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  let url = 'https://api.nal.usda.gov/fdc/v1/food/';\r\n  const [ dailyTotal , setDailyTotal ] = useState([]);\r\n  const [sixDigitID,setSixDigitID] = useState(169991);\r\n  const add = foodObject =>                          {\r\n    let newTotal = [ ...dailyTotal ];\r\n    foodObject.foodNutrients.forEach( n => {\r\n      for (let i = 0; i < newTotal.length; i++)\r\n        if (newTotal[i].nutrient.id === n.nutrient.id)\r\n          return newTotal[i].amount=Math.round(\r\n          (newTotal[i].amount + n.amount)*1000)/1000;\r\n      n.id && newTotal.push(n);            }        );\r\n    setDailyTotal(newTotal);                         }\r\n  const handleID = e => setSixDigitID(e.target.value);\r\n  const handleSubmit = buttonSubmitEvent => {\r\n    buttonSubmitEvent.preventDefault();\r\n    url += `${sixDigitID}?api_key=DEMO_KEY`;\r\n    fetch(url).then(r => r.json()).then(j => add(j));}\r\n  const listTotal = _ => dailyTotal.map(foodNutrient=>\r\n    <li key={foodNutrient.nutrient.id}>\r\n  {foodNutrient.nutrient.name}: {foodNutrient.amount}\r\n  {foodNutrient.nutrient.unitName}</li>);\r\n  return ( <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={almonds} className=\"App-logo\"\r\n        alt=\"Almonds from Hamir\" /> <br />\r\n      <form onSubmit={handleSubmit}>\r\n      <input max='999999' min='100000' type='number'\r\n      onChange={handleID} value={sixDigitID} /></form>\r\n      { dailyTotal.length > 0 && <p> Today's total\r\n      nutritional intake is {listTotal()} </p> }\r\n      <br /> <a className=\"App-link\" href=\r\n      \"https://github.com/hamirmahal/Nutrient-Tracker\"\r\n      rel=\"noopener noreferrer\" target=\"_blank\" > View\r\n      the source material on Hamir Mahal's GitHub </a>\r\n    </header> </div> );                                }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}